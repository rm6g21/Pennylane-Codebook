num_wires = 2
dev = qml.device("default.qubit", wires=num_wires)


@qml.qnode(dev)
def two_qubit_QFT(basis_id):
    """A circuit that computes the QFT on two qubits using qml.QubitUnitary. 
    
    Args:
        basis_id (int): An integer value identifying the basis state to construct.
    
    Returns:
        array[complex]: The state of the qubits after the QFT operation.
    """
    
    # Prepare the basis state |basis_id>
    bits = [int(x) for x in np.binary_repr(basis_id, width=num_wires)]
    qml.BasisStatePreparation(bits, wires=[0, 1])
    
    ##################
    # YOUR CODE HERE #
    ##################
    
    omega = np.exp(2*np.pi*1j/4)

    QFT_mat = np.ones([4,4],dtype=complex)
    for i in range(1,4):
        for j in range(1,4):
            QFT_mat[i,j] = omega**(i*j)
    
   

    qml.QubitUnitary(0.5*QFT_mat,wires=[0,1])

    return qml.state()

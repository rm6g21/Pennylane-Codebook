dev = qml.device("default.qubit", wires=2)

@qml.qnode(dev)
def guess_the_unitary(unitary):
    """Given a unitary that performs a Z or a -Z operation
    on a qubit, guess which one it is.
    
    Args: 
        U (array[complex]): A unitary matrix, guaranteed to be either Z or -Z.
    
    Returns:
        array [int]:  Probabilities on  on the first qubit
        using qml.probs()
    """
    ##################
    # YOUR CODE HERE #
    ##################  
    qml.Hadamard(wires=0)
    qml.ControlledQubitUnitary(unitary,0,1)
    qml.Hadamard(wires=0)
    return qml.probs(wires=0)

# Z gate 
#U = qml.PauliZ.compute_matrix() 

# -Z gate
U = (-1)*qml.PauliZ.compute_matrix()

print(guess_the_unitary(U))

dev = qml.device("default.qubit", wires=4)

estimation_wires = [0, 1, 2]
target_wires = [3]

def prepare_eigenvector():
    qml.PauliX(wires=target_wires)

@qml.qnode(dev)
def qpe(unitary):
    """ Estimate the phase for a given unitary.
    
    Args:
        unitary (array[complex]): A unitary matrix.
        
    Returns:
        array[float]: Measurement outcome probabilities on the estimation wires.
    """
    ##################
    # YOUR CODE HERE #
    ################## 
    prepare_eigenvector()
    qml.broadcast(qml.Hadamard,pattern='single',wires=estimation_wires)
    apply_controlled_powers_of_U(unitary)
    qml.adjoint(qml.QFT(wires=estimation_wires))
    return qml.probs(estimation_wires)

U = qml.T.compute_matrix()
print(qpe(U))

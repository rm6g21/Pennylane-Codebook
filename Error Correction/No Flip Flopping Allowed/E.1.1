dev = qml.device("default.mixed", wires=3)

@qml.qnode(dev)
def bitflip_code_expval(p):
    """A circuit that uses two auxiliary qubits to encode the message of the first qubit, puts them through a simple noisy channel with a chance of a bit-flip error occuring, then decodes it and measures the expectation value of the original message.
    
    Args:
        p (float): Probability of one bit-flip error occuring in the noisy channel for each wire.

    Returns: 
        (float): Expectation value of the message qubit.
    """
    # Using two auxiliary qubits on wires 1 and 2, encode the message on wire 0 into a logical qubit
    ##################
    # YOUR CODE HERE #
    ##################
    qml.CNOT(wires=[0,1])
    qml.CNOT(wires=[0,2])
    
    # Put all wires through a noisy channel, where each wire has a probability p that a bit-flip error will occur
    qml.BitFlip(p, wires=0)
    qml.BitFlip(p, wires=1)
    qml.BitFlip(p, wires=2)
    
    # Decode the message after the noisy channel
    ##################
    # YOUR CODE HERE #
    ##################

    qml.CNOT([0,1])
    qml.CNOT([0,2])
    qml.Toffoli([1,2,0])

    # Measure the expectation value of the message
    return qml.expval(qml.PauliZ([0]))

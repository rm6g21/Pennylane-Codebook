n_bits = 4


def diffusion_matrix():
    """Return the diffusion matrix.

    Returns:
        array[float]: The matrix representation of the diffusion operator.
    """
    ##################
    # YOUR CODE HERE #
    ##################

    matrix1 = 2/((2)**n_bits)*np.ones((2**n_bits,2**n_bits))
    return matrix1 - np.eye(2**n_bits)
    


@qml.qnode(dev)
def difforacle_amp(combo):
    """Apply the oracle and diffusion matrix to the uniform superposition.

    Args:
        combo (list[int]): A list of bits representing the secret combination.

    Returns:
        array[complex]: The quantum state (amplitudes) after applying the oracle
        and diffusion.
    """
    ##################
    # YOUR CODE HERE #
    ##################
    qml.broadcast(qml.Hadamard,wires=range(n_bits),pattern='single')
    qml.QubitUnitary(oracle_matrix(combo),wires=range(n_bits))
    qml.QubitUnitary(diffusion_matrix(),wires=range(n_bits))
    return qml.state()

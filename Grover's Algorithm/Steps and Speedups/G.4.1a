def grover_iter(combo, num_steps):
    """Run Grover search for a given secret combination and a number of iterations.

    Args:
        combo (list[int]): The secret combination, represented as a list of bits.
        num_steps (int): The number of Grover iterations to perform.

    Returns:
        array[float]: Probability for observing different outcomes.
    """
    n_bits = len(combo)
    query_register = list(range(n_bits))
    aux = [n_bits]
    all_wires = query_register + aux
    dev = qml.device("default.qubit", wires=all_wires)

    @qml.qnode(dev)
    def inner_circuit():
       
        # IMPLEMENT THE GROVER CIRCUIT
        
        qml.PauliX(aux)
        hadamard_transform(all_wires)
        for i in range(num_steps):
            oracle(combo)
            diffusion(n_bits)
        
        
        return qml.probs(wires=query_register)

    return inner_circuit()
